#;

#snippet "(?=;?!return[\s\t]*.*)" "end line" r
#snippet "(^((?!return)[\s\S;])*$)" "end line" r
#${1}
#endsnippet
#}
#snippet "^[\s\t]*\}$" "end line" r
#}
#${1}
#endsnippet
#snippet "\)$" "end line" r
#)
#${1}
#endsnippet
#DEFAULT
snippet ",," "regex" rA
/$1
endsnippet


#DEFAULT
snippet "\br\b" "regex" r
/$1/
endsnippet

#DEFAULT
snippet "\bdf|\bde\b|\bdef" "default..." r
default`!p
if t[1] and t[1][0] == ":":
	t[1]=t[1][1:len(t[1])]
	snip.swapped = True
	snip.rv = ":"
	snip >> 1
	snip += ""
elif not hasattr(snip,'swapped') and t[1] and t[1][0]:
	snip.rv = " "
`$1
endsnippet

#EXTEND
snippet "\b([,]{0,1})xt\b|\b([,]{0,1})ex\b" "extend" r
`!p
if match.group(1):
	snip.rv = ' '
`extends`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#FROM
snippet "([,]{0,1})fr\b" "from" r
`!p
if match.group(1):
	snip.rv = ' '
`from`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#IMPORT
snippet "([,]{0,1})im\b" "import" r
`!p
if match.group(1):
	snip.rv= ' '
`import`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#EXPORT
snippet "\bxp\b|\bexp\b|\bep\b" "export" r
export`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#CONST
snippet "\bc\b|\bco\b" "const" r
const`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#scoped var(let)
snippet "\bs\b|\blt\b" "let" r
let`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet



#class block
snippet "\bcl\b|\bcls\b" "cl" r
class`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet


snippet "\bnum\b|\bnm\b" "number" r
number
endsnippet

#MODULE
snippet "\bmod\b|\bmo\b" "module" r
module
endsnippet

#MODULE.EXPORTS
snippet "\bmoxps\b|\bmodexps\b" "module.exports" r
module.exports
endsnippet

#EXPORTS
snippet "\brq\b|\breq\b" "require" r
require($1)
endsnippet

#EXPORTS
snippet "\bxps\b|\bexps\b" "exports" r
exports
endsnippet

snippet "\bsu\b" "super" r
super
endsnippet

snippet "\bsy\b|\bsym\b" "Symbol" r
Symbol
endsnippet

#EXPORTS
snippet "\bfa\b" "arrow function" r
($1) => $2
endsnippet

#EXPORTS
snippet "\bfao\b" "arrow function" r
($1) => {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

snippet "\bfg\b" "function generator" r
function *$1 ($2) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

snippet "\bfgc\b" "function generator class" r
*$1 ($2) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet
snippet "\bfc\b" "function class es6" r
$1 ($2) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
`${3}`!p

if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

snippet "\bcons\b" "constructor" r
constructor ($1) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
`$2`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`
endsnippet
#body result
#body
snippet "\bb\b" "body" r
{`!p
if (t[1] and t[1].find('\n') != 0):
	snip >> 1
	snip += ''
`$1`!p
if (t[1] and t[1].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`
endsnippet

snippet "\bbo\b" "body cursor out" r
{}
endsnippet


snippet "\bbi\b" "inline body" r
{$1}
endsnippet

#Object KEY
snippet "\bk\b" "key" r
'$1': $2
endsnippet


#for of
snippet "\bfo\b" "for object" r
for (${1} of ${2}) {`!p
if (t[4] and t[4].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${4}`!p
if (t[4] and t[4].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

#promise
snippet "\bpro\b" "promise" r
Promise
endsnippet

#then
snippet "\bthe\b" "then" r
then($1)
endsnippet

#then
snippet "\brej\b" "reject" r
reject($1)
endsnippet
#then
snippet "\bres\b" "resolve" r
resolve($1)
endsnippet
snippet "\bcat\b" "catch" r
catch($1)
endsnippet

#null
snippet "\bnu\b" "null" r
null$1
endsnippet
#anew
snippet "\b(an[e]{0,1}w)\b" "new" r
$1 = new $2
endsnippet
#new
snippet "\bnw\b" "new" r
new $1
endsnippet
#window
snippet "\bwin\b" "window" r
window$1
endsnippet
#document
snippet "\bdoc\b" "document" r
document$1
endsnippet

#removeEventListener
snippet "\brel\b" "removeEventListener" r
.removeEventListener(${1})$2
endsnippet

#addEventListener
snippet "\bael\b" "addEventListener" r
.addEventListener(${1})$2
endsnippet

#createElement
snippet "\bcel\b" "createElement" r
.createElement(${1})$2
endsnippet

#querySelector
snippet "\bqs\b" "querySelector" r
.querySelector(${1})
endsnippet

#querySelectorAll
snippet "\bqsa\b" "querySelectorAll" r
.querySelectorAll(${1})
endsnippet

#getBoundingClentRect
snippet "\bgbr\b" "getBoundingClientRect" r
.getBoundingClientRect(${1})
endsnippet


#appendChild
snippet "\bac\b" "appendChild" r
.appendChild(${1})
endsnippet

#document.createElement
snippet "\bdcel\b" "document.createElement" r
document.createElement('${1}')
endsnippet

#setAttribute
snippet "\bsta\b" "setAttribute" r
.setAttribute('${2}','${3}')
endsnippet

#removeAttribute
snippet "\brma\b" "removeAttribute" r
.removeAttribute('${2}')
endsnippet

#stProperty
snippet "\bsp\b" "setProperty" r
.setProperty('${1}','${2}')
endsnippet

#removeProperty
snippet "\brmp\b" "removeProperty" r
.removeProperty('${1}')
endsnippet

#me
snippet "\bmeth\b" "me" r
me = this
endsnippet

#this
snippet "\bt\b" "this" r
this
endsnippet

#style.propertyValue
snippet "\bspv\b" "style set property value" r
style.${1} = 
endsnippet

#style.setProperty
snippet "\bssp\b" "style.setProperty" r
style.setProperty('${1}','${2}')
endsnippet

#style.removeProperty
snippet "\bsrp\b" "style.removeProperty" r
style.removeProperty('${1}')
endsnippet


#removeProperty
snippet "\bto\b|typeof\b" "typeof" r
typeof ${1} === '${2}'
endsnippet

#a
snippet "\b([,]{0,1})a\b" "and &" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`&
endsnippet

#o
snippet "\b([,]{0,1})o\b" "or |" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`|
endsnippet

#and &&
snippet "\b([,]{0,1})aa\b" "and &&" r
`!p
if match.group(1):
	snip.rv = ' '
`&& 
endsnippet
#or ||
snippet "\b([,]{0,1})oo\b" "or ||" r
`!p
if match.group(1):
	snip.rv = ' '
`|| 
endsnippet
#p ()
snippet "\b[,]{0,1}pa\b" "parenthesis" r
(${1})
endsnippet

#pop ({})
snippet "\b[,]{0,1}pfa\b" "parenthesis with function arrow" r
(($1) => $2)
endsnippet
#pop ({})
snippet "\b[,]{0,1}pfn\b" "parenthesis with object" r
(function`!p
if t[1] and t[1][0] != ' ':
	snip.rv = ' '
`${1} (${2}) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res='}'
`)
endsnippet

#pop ({})
snippet "\b[,]{0,1}p(h|b)k\b" "parenthesis with object" r
({
	${1}: ${2}
}${3})
endsnippet

#pop ({})
snippet "\b[,]{0,1}p(h|b)\b" "parenthesis with object" r
({}${3})
endsnippet

#par ([])
snippet "\b[,]{0,1}par\b" "parenthesis with array" r
([${1}])
endsnippet


#ar []
snippet "\b[\,]{0,1}ar\b" "array" r
[${1}]$2
endsnippet

#aro []
snippet "\b[\,]{0,1}(aro|ao)\b" "array cursor out" r
[]
endsnippet

#arh
snippet "\bar(h|b)k\b" "array containing object" r
[{
	${1}: ${2}
}]
endsnippet

#arh
snippet "\bar(h|b)\b" "array containing object" r
[{}]
endsnippet

#h {}
snippet "{}(h|b)k\b|\b(h|b)k\b" "object" r
{
	${1}: ${2}
}
endsnippet

snippet "\bh\b" "object" r
{$1}
endsnippet

snippet "\bho\b" "object" r
{}
endsnippet
#snippet "([^\{o\}]{1})p\b" "property in object" r
#`!p
#res = match.group(1) if match.group(1) is not None else ''
#`'${1}' : ${2}
#endsnippet
snippet "(\{(h|b)k)(})?\b" "object key" r
{
	${1}: ${2}
`!p
res = '\n}' if match.group(2) is not None else ''
`
endsnippet 
#,
snippet "\,$" "object key" r
,
${1}: ${2}
endsnippet

#setget
snippet "\bsgc\b|\bsetgetc\b|\bgetsetc\b|\bgsc\b" "setter/getter" r
$1 (v) {
	if (arguments.length) {
		$2 = v; 
		return this;
	}
	return $2;
}
endsnippet
#setget
snippet "\bsg\b|\bsetget\b|\bgetset\b|\bgs\b" "setter/getter" r
function (v) {
	if (arguments.length) {
		$1 = v; 
		return this;
	}
	return $1;
}
endsnippet

#proto
snippet "\bproto\b" "prototype" r
.prototype
endsnippet

#forEach
snippet "\.fe\b" "forEach..." r
.forEach(${1})
endsnippet

#pop
snippet "\.po\b|\.p\b" "pop..." r
.pop()
endsnippet

#shift
snippet "\.sh\b" "shift..." r
.shift()
endsnippet

#unshift
snippet "\.us\b|\.ush\b" "unshift..." r
.unshift(${1})
endsnippet

#push
snippet "\.pu\b" "push..." r
.push(${1})
endsnippet

#map
snippet "\.ma\b" "map..." r
.map(${1})
endsnippet

#slice
snippet "\.sl\b" "slice..." r
.slice(${1})
endsnippet

#splice
snippet "\.spl\b" "splice..." r
.splice(${1})
endsnippet

#v
snippet "\bv|^v" "var" r
var`!p
if t[1] and t[1][0] != " ":
	snip.rv += " "
`$1
endsnippet

#wh 
snippet "\bwh\b" "while" r
while (${1}) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`
endsnippet

#try
snippet "\btry\b|\btr\b" "try...catch" r
try {
	${1}
} catch (${2:e}) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res=''
`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'
`
endsnippet

#do
snippet "\bdw\b" "do while" r
do {`!p
if (t[1] and t[1].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res=""
`${1}`!p
if (t[1] and t[1].find('\n') != 0):
	snip += '}'
else:
	res="}"
` while (${2})
endsnippet
#fp
snippet "\bfp\b" "for property" r
for (${1} in ${2}) {`!p
if (t[4] and t[4].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${4}`!p
if (t[4] and t[4].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet
	
	#fl
snippet "\bfl\b" "for loop - no vars" r
for (${1};${2};${3}) {`!p
if (t[4] and t[4].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${4}`!p
if (t[4] and t[4].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

#flu
snippet "\bflu\b" "for loop - increment up and cached length (incrementer then length then ln)" r
for (${1};${1/((var|let)[\s\t]*)|((=|,).*)//g}<${1/(.*,)|(=.*)|((var|let)[\s\t]*.*)//g)/};${1/((var|let)[\s\t]*)|((=|,).*)//g}++) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet
#fld
snippet "\bfld\b" "for loop - increment down and cached length (decrementer, assume 0)" r
for (${1};${1/((var|let)[\s\t]*)|((=|,).*)//g}>=0;${1/((var|let)[\s\t]*)|((=|,).*)//g}--) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

#"alert
snippet "\bal\b" "alert" r
alert(${1});
endsnippet

#"console.log"
snippet "\bcg\b" "console.log" r
console.log(${1});
endsnippet

#"console.warn"
snippet "\bcw\b" "console.warn" r
console.warn(${1});
endsnippet

#"console.error"
snippet "\bce\b" "console.error" r
console.error(${1});
endsnippet

#CLOSURE
snippet "\bcla\b" "closure.. arrow." r
(($1) => $2)($3)
endsnippet

#CLOSURE
snippet "\bclo\b" "closure..." r
(function (${1}) `!p 
if (t[2] and t[2].find('\n') != 0):
	snip += '{'
	snip >> 1
	snip += ''
else:
	res = '{'
`${2}`!p
if (t[2]):
	snip >> 1
	snip += ''
else:	
	res = ' '
`return $3;`!p
if (t[2]):
	snip.rv += '\n'
	snip.rv += snip.mkline('')
else:	
	res = ''
`})(${4})
endsnippet
	
#SWITCH
snippet "\bsw\b" "switch..." r
switch (${1}) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${2:case }`!p
if ((t[2] != '' and t[2].find('\n') != 0) ):
	if (t[2] != 'case '):
		t[2] = t[2].strip()
	snip>> 1
	snip += ''
else:
	res = ''
`${3:default }`!p
if (t[3] != 'default '):
	t[3] = t[3].strip()
`
}
endsnippet

#STRING -single
snippet "'([^']*)'\b" "single quote" r
'`!p
snip.rv = match.group(1)
`'+
'${1}'${2}
endsnippet

##STRING -single
#snippet "''[01]" "single quote" r
#'${1}'+
#'${2}'
#endsnippet

#STRING -double
snippet ""([^"]*)"\b" "double quote" r
"`!p
snip.rv = match.group(1)
`"+
"${1}"
endsnippet

##STRING -double
#snippet "\"\"p\b" "double quote" r
#"${1}"+
#"${2}"
#endsnippet

#CASE
snippet "\bca\b|\bcase\b" "case..." r
case ${1}:`!p
if (t[2]):
	snip >> 1
	snip += ''
`${2}`!p
if (t[2] == '' and t[3]):
	snip.rv += ' '
if (t[2] and t[3] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:break;}
endsnippet



#BREAK
snippet "\bbr\b" "break;" r
break;
endsnippet

#CONTINUE
snippet "\bcon\b|\bcn\b" "continue;" r
continue;
endsnippet

#RETURN
snippet "\bre\b|\bret\b" "return" r
return${1/.+/ /}`!p
if (t[1] and t[2] and t[1].find(' ') != 0):
	snip >> 1
	snip += ' '
else:
	res = ''
`${1};
endsnippet				

#DELETE
snippet "\bdel\b" "delete" r
delete${1/.+/ /}${1:pointer};
endsnippet

#arguments
snippet "\barg\b|\bargs\b" "arguments" r
arguments
endsnippet
				
#FUNCTION
snippet "\bfn\b|\bfun\b" "function () {}" r
function`!p
if t[1] and t[1][0] != ' ':
	snip.rv= ' '
`${1} (${2}) {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''
`${3:}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res='}'
`
endsnippet


#IF
snippet "\bif\b" "if..." r
if ($1) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${3/.+/ /}${3}
endsnippet

#ELSE IF
snippet "\bei\b|\belseif\b" "else i.." r
else if ($1) {`!p
if (t[2] and t[2].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${2}`!p
if (t[2] and t[2].find('\n') != 0):
	snip += '}'
else:
	res = '}'`${3/.+/ /}${3}
endsnippet

#divide
snippet "\bas\b" "else..." r
async`!p
if t[1]:
	snip.rv = ' '
`$1
endsnippet


#ELSE
snippet "\bel\b|\belse\b" "else..." r
else {`!p
if (t[1] and t[1].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${1}`!p
if (t[1] and t[1].find('\n') != 0):
	snip += '}'
else:
	res = '}'`
endsnippet

#setTimeout
snippet "\bst\b" "setTimeout..." r
setTimeout(${1})${2}
endsnippet

#setTimeoutClears
snippet "\bstc\b" "setTimeout Cleared..." r
${1:if ($2) {
	clearTimeout($2);
}}
${2} = setTimeout(function () {
	${2/var[\s\t\n]+//} = undefined;
	${3}
}${4})${5};${6}
endsnippet

snippet "\bu\b|\bun\b" "undefined" r
undefined
endsnippet

snippet "(^|\b)([,]{0,1})e\b" "assignment" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`= 
endsnippet
#e 

#n
snippet "(^|\b)([,]{0,1})n\b" "not" r
!
endsnippet

#se
snippet "(^|\b)([,]{0,1})(eee|se)\b" "Strict equality" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`===
endsnippet

#ee
snippet "(^|\b)([,]{0,1})ee\b" "Equality" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`==
endsnippet

#nee
snippet "(^|\b)([,]{0,1})(sne|nee)\b" "Strict not equals..." r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`!==
endsnippet

#ne
snippet "(^|\b)([,]{0,1})ne\b" "Not equals..." r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`!=
endsnippet

#l
snippet "(^|\b)([,]{0,1})l\b" "less than" r
<
endsnippet

#le 
snippet "(^|\b)([,]{0,1})le\b" "less than equal" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`<=
endsnippet

#g
snippet "(^|\b)([,]{0,1})g\b" "greater than" r
>
endsnippet

#ge
snippet "\b([,]{0,1})ge\b" "greater than equal" r
`!p
if match and match.group(1):
	res = ' '
else:
	res = ''
`>=
endsnippet


#
#
#
#Sencha Helpers
#
#
#

#edefine
snippet "\bedef\b" "Ext.define... " r
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.Base}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {}}${10}${11/.+/,/}
	${11}
}${12/.+/,
/}${12});${13}
endsnippet

snippet "\bemodel\b" "Ext.define..." r
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.data.Model}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {${10/.+/
		/}${10:'idProperty' : '${11}'}`!p res = ',' if (t[12] and t[10] or t[10] and t[14]) else ''`${12/.+/
		/}${12:'fields' : [${13}]}`!p res=',' if (t[12] and t[14]) else ''`${14/.+/
		/}${14:'proxy' : {${15}}} 
	}}${16/.+/,/}
	${16}
}${17/.+/,
/}${17});${18}
endsnippet
#econtroller
snippet "\becontroller\b" "Ext.define... controller" r
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.app.Controller}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'config' : {${10/.+/
		/}${10:'refs' : {${11}}}`!p res = ',' if (t[12] and t[10] or t[10] and t[14]) else ''`${12/.+/
		/}${12:'control' : {${13}}}`!p res=',' if (t[12] and t[14]) else ''`${14/.+/
		/}${14:'routes' : {${15}}} 
	}}${16/.+/,/}
	${16}
}${17/.+/,
/}${17});${18}
endsnippet
#estore
snippet "\bestore\b" "Ext.define... store" r
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.data.Store}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alias' : [${6}]}${7/.+/,
	/}${7:'alternateClassName' : '${8}'}${9/.+/,
	/}${9:'statics' : {${10}}}${11/.+/,
	/}${11:'config' : {${12/.+/
		/}${12:'storeId' : '${13}'}`!p res = ',' if (t[14] and t[12] or t[12] and t[16]) else ''`${14/.+/
		/}${14:'model' : '${15}'}`!p res=',' if (t[14] and t[16]) else ''`${16/.+/
		/}${16:'proxy' : {${17}}} 
	}}${18/.+/,/}
	${18}
}${19/.+/,
/}${19});${20}
endsnippet
snippet "\beview\b" "Ext.define... view" r
Ext.define('${1:`!p res = __import__('extpathloader').namify(path)`}',{
	'extend' : '${2:Ext.Container}'${3/.+/,
	/}${3:'requires' : [${4}]}${5/.+/,
	/}${5:'alternateClassName' : '${6}'}${7/.+/,
	/}${7:'statics' : {${8}}}${9/.+/,
	/}${9:'xtype' : '${10}'}${11/.+/,
	/}${11:'config' : {${12/.+/
		/}${12:'cls' : '${13}'}`!p res = ',' if (t[14] and t[12] or t[12] and t[16]) else ''`${14/.+/
		/}${14:'style' : {${15}}}`!p res=',' if (t[14] and t[16]) else ''`${16/.+/
		/}${16:'items' : [${17}]} 
	}}${18/.+/,/}
	${18}
}${19/.+/,
/}${19});${20}
endsnippet


##testing
snippet "\bdes\b" "describe" wr
describe('$1', ($2) => {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'`);
endsnippet

snippet "\bit\b" "it" wr
it('$1', ($2) => {`!p
if (t[3] and t[3].find('\n') != 0):
	snip >> 1
	snip += ''
else:
	res = ''`${3}`!p
if (t[3] and t[3].find('\n') != 0):
	snip += '}'
else:
	res = '}'`);
endsnippet




#angular
snippet "\@in\b" "@input" r
@Input($1) $2;
endsnippet

snippet "\@ou\b|\@out\b" "@Output" r
@Output($1) $2;
endsnippet

snippet "\@vc\b" "@ViewChild" r
@ViewChild('$1') ${2:$1};
endsnippet

snippet "\@cm\b|\@cmp\b" "@Component" r
@Component({
	selector: '$1',
	templateUrl: '$2.html',
	styleUrls: ['${3:$2}.scss']
}) $4;
endsnippet

#x
snippet "\b[\,]{0,1}x\b" "colon (extends)" r
:`!p
if t[1] and t[1][0] != " " and t[1][0].isalnum():
	snip.rv += " "
`${1}
endsnippet


snippet "\@di\b|\@dir\b" "@Component" r
@Directive($1) $2;
endsnippet
#end angular
